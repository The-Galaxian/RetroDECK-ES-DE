name: Build AppImage

on:
  push:
    branches:
      - retrodeck-main
  pull_request:
    branches:
      - retrodeck-main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y cmake wget

      - name: Download appimagetool
        run: |
          if [ ! -f appimagetool-x86_64.AppImage ]; then
            wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          fi
          chmod a+x appimagetool-x86_64.AppImage

      - name: Download linuxdeploy
        run: |
          if [ ! -f linuxdeploy-x86_64.AppImage ]; then
            wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          fi
          chmod a+x linuxdeploy-x86_64.AppImage

      - name: Build SDL library
        run: |
          SDL_RELEASE_TAG=release-2.30.2
          SDL_SHARED_LIBRARY=libSDL2-2.0.so.0.3000.2

          if [ ! -f external/SDL/build/${SDL_SHARED_LIBRARY} ]; then
            echo "Building the SDL library..."
            cd external
            rm -rf SDL
            git clone https://github.com/libsdl-org/SDL.git
            cd SDL
            git checkout $SDL_RELEASE_TAG

            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=Release -S .. -B .

            if [ $(grep PKG_PIPEWIRE_VERSION:INTERNAL= CMakeCache.txt) = "PKG_PIPEWIRE_VERSION:INTERNAL=" ]; then
              echo "The SDL library is not configured with PipeWire support, aborting."
              exit 1
            fi

            make -j4
            cd ../../..
          else
            echo "The SDL library has already been built, skipping this step"
          fi

      - name: Create AppDir and build project
        run: |
          rm -rf ./AppDir
          mkdir AppDir

          rm -f CMakeCache.txt
          cmake -DAPPIMAGE_BUILD=on -DRETRODECK=on .
          make clean
          make -j4
          make install DESTDIR=AppDir

          cd AppDir
          ln -s usr/bin/es-de AppRun
          ln -s usr/share/pixmaps/es-de.svg .
          ln -s usr/share/applications/org.es_de.frontend.desktop .
          ln -s es-de.svg .DirIcon

          cd usr/bin
          ln -s ../share/es-de/resources .
          ln -s ../share/es-de/themes .
          cd ../../..

      - name: Deploy AppImage
        run: |
          ./linuxdeploy-x86_64.AppImage -l /lib/x86_64-linux-gnu/libOpenGL.so.0 -l /lib/x86_64-linux-gnu/libGLdispatch.so.0 -l /lib/x86_64-linux-gnu/libgio-2.0.so.0 --appdir AppDir
          cp external/SDL/build/libSDL2-2.0.so.0 AppDir/usr/lib/libSDL2-2.0.so.0
          ./appimagetool-x86_64.AppImage AppDir
          mv ES-DE-x86_64.AppImage RD-ES-DE_x64.AppImage
          echo "Created AppImage ES-DE_x64.AppImage"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: RD-ES-DE_x64.AppImage
          path: RD-ES-DE_x64.AppImage
